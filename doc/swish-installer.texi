\input texinfo

@settitle SWISH Installer Manual
@include my-bib-macros.texi
@mybibuselist{References}
@paragraphindent none

@c DOCUMENT LICENSE FOLLOWS.
@copying
Copyright @copyright{} 2016 Franco Masotti @email{franco.masotti@@student.unife.it}

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end copying

@titlepage
@title SWISH Installer Documentation
@author Franco Masotti
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top SWISH Installer

This manual is for SWISH Installer.

@menu
* Description::     A brief description of what this is all about
* Installation::    Installation procedures on various systems
* Components download:: Components to be downloaded after the installation
* Daemons management:: How to start, stop and enable the daemons
* Development::    A thorough description on how to develop over this installer
* Thanks:: People and communities
* @mybibnode{}:: References to the technologies used
@end menu
@end ifnottex

@c ----
@c ----
@c ----
@c ----

@node Description
@chapter About
@cindex test
@section About
The purpose of this repository is to handle the creation 
of serveral packages and helpers in order to
install Cplint@footnote{@mybibcite{Cplint}}
on SWISH@footnote{@mybibcite{SWISH}}
with an Rserve@footnote{@mybibcite{Rserve}} environment,
as well as the "vanilla" version of SWISH.

SWISH relies on SWI Prolog@footnote{@mybibcite{Swipl}}, 
a prolog interpteter.

@subsection Terminology
In order to understand this documentation correctly some terminology used here 
must be explained.

@code{#} means that the command must be executed by @code{root}.

@code{$} means that the command must be executed by the current user.

@subsection Directory listings
When you see something like the following, it represents a directory listing of
the first named (head) directory. These representations are generated from 
@command{$ tree --charset=ascii -d <dirname>}.

@example
common/
|-- rserve-sandbox
|-- swish
`-- swish-cplint
@end example

@c ----
@c ----
@c ----
@c ----

@node Installation
@chapter Installation
@section Arch Linux
In order to have a fully functional installation of SWISH or Cplint on SWISH
you either have to install the packages @code{swish} or @code{swish-cplint}.

There at least two possibilities to install both packages.

@subsection Using an AUR helper

Yaourt@footnote{@mybibcite{Yaourt}} is among the most popular 
AUR@footnote{@mybibcite{AUR}}
helpers available. The following 
commands@footnote{@mybibcite{Packages on the AUR}}
will install all the dependencies automatically.
@verbatim
$ yaourt -Sa swish-cplint --noconfirm
@end verbatim
or
@verbatim
$ yaourt -Sa swish --noconfirm
@end verbatim

@quotation Note
When you install Yaourt on
Parabola GNU/Linux-libre@footnote{@mybibcite{Parabola}}
you will be asked to remove @code{your-freedom}.
@end quotation

@subsection Without using an AUR helper
@subsubsection Cplint on SWISH

Execute the following commands sequentially.

@itemize @bullet
@item
Install @code{swi-prolog-devel}:

@verbatim
$ wget "https://aur.archlinux.org/cgit/\
aur.git/snapshot/swi-prolog-devel.tar.gz"
$ tar -zxvf swi-prolog-devel.tar.gz
$ cd swi-prolog-devel
$ makepkg -sri --noconfirm
@end verbatim

@item
Install @code{rserve-sandbox-docker}:
@verbatim
$ wget "https://aur.archlinux.org/cgit/\
aur.git/snapshot/rserve-sandbox-docker.tar.gz"
$ tar -zxvf rserve-sandbox-docker.tar.gz
$ cd rserve-sandbox-docker
$ makepkg -sri --noconfirm
@end verbatim

@item
Install @code{swish-cplint}:
@verbatim
$ wget "https://aur.archlinux.org/cgit/\
aur.git/snapshot/swish-cplint.tar.gz"
$ tar -zxvf swish-cplint.tar.gz
$ cd swish-cplint
$ makepkg -sri --noconfirm
@end verbatim

@end itemize

@subsubsection SWISH

@itemize @bullet
@item
Install @code{swi-prolog-devel}:

@verbatim
$ wget "https://aur.archlinux.org/cgit/\
aur.git/snapshot/swi-prolog-devel.tar.gz"
$ tar -zxvf swi-prolog-devel.tar.gz
$ cd swi-prolog-devel
$ makepkg -sri --noconfirm
@end verbatim

@item
Install @code{swish}:
@verbatim
$ wget "https://aur.archlinux.org/cgit/\
aur.git/snapshot/swish.tar.gz"
$ tar -zxvf swish.tar.gz
$ cd swish
$ makepkg -sri --noconfirm
@end verbatim

@end itemize

@subsection Daemons management
Arch Linux and derivative distros use 
Systemd@footnote{@mybibcite{systemd}} as the 
init system. First see @ref{Components download} and then
see @ref{Daemons management}.

@section Debian
TODO

@c ----
@c ----
@c ----
@c ----

@node Components download
@chapter Components download
Before running the daemons some components must be downloaded.

This section only applies to Cplint on SWISH.

@section Docker
Before doing anything else you must start
Docker@footnote{@mybibcite{Docker}} manually.
See @ref{Daemons management}.

@section Rserve sandbox
To download the Docker image file as well as all dependencies
for R@footnote{@mybibcite{R}}, run the following command:
@verbatim
$ sudo -u rsd rserve-sandbox-docker -i
@end verbatim

@section Cplint on SWISH
To download all the prolog packages necessary in order to run
Cplint on SWISH correcly:
@verbatim
$ sudo -u swish swish-cplint -i
@end verbatim

@c ----
@c ----
@c ----
@c ----

@node Daemons management
@chapter Daemons management
Commands to manage the daemons depend on the init system in use.

@section Systemd
@subsection Cplint on SWISH
Docker is a dependency which must be started manually.
@verbatim
# systemctl start docker
@end verbatim

The following command will run @code{swish-cplint} as well as
@code{rserve-sandbox-docker} as its dependency:
@verbatim
# systemctl start swish-cplint
@end verbatim

To start @code{swish-cplint} and @code{rserve-sandbox-docker} at boot:
@verbatim
# systemctl enable swish-cplint
@end verbatim

You can stop both services with:
@verbatim
# systemctl stop swish-cplint
# systemctl stop rserve-sandbox-docker
@end verbatim

@quotation Note
stopping @code{swish-cplint}
does not imply that @code{rserve-sandbox-docker}
will be stopped.
@end quotation

To check the status of both daemons:
@verbatim
# systemctl status swish-cplint
# systemctl status rserve-sandbox-docker
@end verbatim

@subsection SWISH
Running and managing SWISH alone is very similar to the 
previous method: instead of using @command{swish-cplint} 
as part of the commands, you must use @command{swish}. 
You don't need to worry about Rserve or Docker.

@c ----
@c ----
@c ----
@c ----

@node Development
@chapter Development
@section Repository structure

@verbatim
.
|-- common
|   |-- rserve-sandbox
|   |-- swish
|   `-- swish-cplint
`-- distributions
    |-- archLinux-based
    |   |-- rserve-sandbox
    |   |-- swish
    |   `-- swish-cplint
    `-- debian-based
@end verbatim

The @file{distributions} directory all the files useful to
build packages for a specific distribution. Makefiles
are used to achieve this.

The @file{common} directory contains all the files which
are not distribution specific.

@subsection Distribution-specific files
@xref{Development, , Building the packages}

@subsection Common files

@verbatim
common/
|-- rserve-sandbox
|   `-- run.sh
|-- shared_functions.sh
|-- swish
|   |-- run.pl
|   `-- run.sh
`-- swish-cplint
    |-- install_web_iface_deps.pl
    |-- run.pl
    `-- run.sh
@end verbatim

The @file{run.sh} files are helpers to start and stop the daemons.
These helpers should work on any distribution. You can 
edit the variables at the top of each file accordingly.

The @file{run.pl} files are a modified version
of the original files with the same name. These have been
created in order to lauch SWISH as a background program.
Without the changes contained in those files, you couldn't
run SWISH in the background.

Another important file is @file{shared_functions.sh}
which contains all common functions for the @file{run.sh}
files. It must be appended to every @file{run.sh}, within
a Makefile for example with the following:

@example
$ cat shared_functions.sh >> @{rserve-sandbox,swish,swish-cplint@}/run.sh
@end example

Cplint on SWISH contains a post installation script called
@file{install_web_iface_deps.pl}. This script, called by
@file{run.sh}, simply installs all the necessary Prolog
dependencies automatically.

@section Guidelines to create packages
Makefiles are used to build the package in a new directory
by copying all necessary files (also from
the @file{common} directory). Each Makefile is
distribution-based specific.

You will read general information about the packages,
all their install and remove actions and how to build
your version of the modified packages.

The install and remove actions have to be done sequentially.

@subsection Rserve sandbox
@subsubsection General information
@itemize @bullet
@item
Name

@code{rserve-sandbox-docker}

@item
Data directory

@file{/usr/share/rserve-sandbox-docker}

@item
Dependencies
@itemize @minus
@item
R

@item
Docker
@end itemize

@end itemize

@subsubsection Install actions
@itemize @bullet
@item
Pre

@itemize @minus
@item
None
@end itemize

@item
During

@itemize @minus
@item
Make a symbolic link to be able to call 
@file{rserve-sandbox-docker} from @file{/usr/bin}

@verbatim
$ ln -s /usr/share/rserve-sandbox-docker/run.sh \
/usr/bin/rserve-sandbox-docker
@end verbatim
@end itemize

@item
Post

@itemize @minus
@item
Add @code{rserve} user and group.

@verbatim
# getent group rserve &>/dev/null || groupadd -r rserve >/dev/null
# getent passwd rserve &>/dev/null || useradd -m -d /home/rserve \
-s /bin/false -r -g rserve rserve >/dev/null
# chmod 750 /home/rserve
@end verbatim

@item
Add @code{rsd} user and group.

@verbatim
# getent group rsd &>/dev/null || groupadd -r rsd >/dev/null
# getent passwd rsd &>/dev/null || useradd \
-s /bin/false -r -g rsd rsd >/dev/null
@end verbatim

@item
Add the new user to the `docker` group

@verbatim
# gpasswd -a rsd docker >/dev/null
@end verbatim

@item
Change ownership of the package data directory

@verbatim
# chown -R rsd:rsd /usr/share/rserve-sandbox-docker
@end verbatim

@end itemize

@end itemize

@subsubsection Remove actions
@itemize @bullet
@item
Pre

@itemize @minus
@item
None
@end itemize

@item
During

@itemize @minus
@item
None
@end itemize

@item
Post

@itemize @minus
@item
Tell the user that @file{/home/rserve}, @code{rsd} user 
and group, @code{rserve} user and group 
and all the Docker files can be removed (this depends 
on the package remove policies of the chosen distro).

@end itemize

@end itemize

@subsection Cplint on SWISH
@subsubsection General information
@itemize @bullet
@item
Name

@code{swish-cplint}

@item
Data directory

@file{/usr/share/swish-cplint}

@item
Dependencies
@itemize @minus
@item
SWI Prolog (developement version)

@item
Git

@item
Graphviz

@item
libXinerama

@item
libXpm

@item
Rserve sandbox

@item
Bower (make dependency)
@end itemize

@end itemize

@subsubsection Install actions
@itemize @bullet
@item
Pre

@itemize @minus
@item
Compile the server

@verbatim
$ bower --allow-root install
$ make src
@end verbatim

@item
Copy @file{run.pl}, @file{run.sh} and
@file{install_web_iface_deps.pl} in SWISH's root directory.
@end itemize

@item
During

@itemize @minus
@item
Make a symlink to be able to call 
@file{swish-cplint} from @file{/usr/bin}

@verbatim
$ ln -s /usr/share/swish-cplint/run.sh /usr/bin/swish-cplint
@end verbatim

@end itemize

@item
Post

@itemize @minus
@item
Add @code{swish} user and group

@verbatim
# getent group swish &>/dev/null || groupadd -r swish >/dev/null
# getent passwd swish &>/dev/null || useradd -m -d /home/swish \
-r -g swish swish >/dev/null
@end verbatim

@item
Add @code{swish} user to the previously created @code{rserve}
group.

@verbatim
# gpasswd -a swish rserve >/dev/null
@end verbatim

@item
Change ownership of the package data directory

@verbatim
# chown -R swish:swish /usr/share/swish-cplint
@end verbatim

@end itemize

@end itemize

@subsubsection Remove actions
@itemize @bullet
@item
Pre

@itemize @minus
@item
None
@end itemize

@item
During

@itemize @minus
@item
None
@end itemize

@item
Post

@itemize @minus
@item
Tell the user that @file{/home/swish} and @code{swish} user 
and group can be removed (this depends on the package 
remove policies of the chosen distro).

@end itemize

@end itemize

@subsection SWISH
@subsubsection General information
@itemize @bullet
@item
Name

@code{swish}

@item
Data directory

@file{/usr/share/swish}

@item
Dependencies
@itemize @minus
@item
SWI Prolog (developement version)

@item
libXinerama

@item
libXpm

@item
Bower (make dependency)
@end itemize

@end itemize

@subsubsection Install actions
@itemize @bullet
@item
Pre

@itemize @minus
@item
Compile the server

@verbatim
$ bower --allow-root install
$ make src
@end verbatim

@item
Copy @file{run.pl} and @file{run.sh} and in SWISH's
root directory.
@end itemize

@item
During

@itemize @minus
@item
Make a symlink to be able to call 
@file{swish} from @file{/usr/bin}

@verbatim
$ ln -s /usr/share/swish/run.sh /usr/bin/swish
@end verbatim

@end itemize

@item
Post

@itemize @minus
@item
Add @code{swish} user and group

@verbatim
# getent group swish &>/dev/null || groupadd -r swish >/dev/null
# getent passwd swish &>/dev/null || useradd -m -d /home/swish \
-r -g swish swish >/dev/null
@end verbatim

@item
Change ownership of the package data directory

@verbatim
# chown -R swish:swish /usr/share/swish
@end verbatim

@end itemize

@end itemize

@subsubsection Remove actions
@itemize @bullet
@item
Pre

@itemize @minus
@item
None
@end itemize

@item
During

@itemize @minus
@item
None
@end itemize

@item
Post

@itemize @minus
@item
Tell the user that @file{/home/swish} and @code{swish} user 
and group can be removed (this depends on the package 
remove policies of the chosen distro).

@end itemize

@end itemize

@section Building the packages
@subsection Arch Linux

@verbatim
archLinux-based/
|-- Makefile
|-- rserve-sandbox
|   |-- .install
|   |-- PKGBUILD
|   `-- rserve-sandbox-docker.service
|-- swish
|   |-- .install
|   |-- PKGBUILD
|   `-- swish.service
`-- swish-cplint
    |-- .install
    |-- PKGBUILD
    `-- swish-cplint.service
@end verbatim

Once you've made changes you can run @command{$ make}
then change directory into one of the new @code{.aur} generated
directories and finally run @command{$ makepkg -sri} to install
the package.

@section Help pages
@subsection Rserve sandbox
@verbatim
rsd [OPTION]
Docker spec for running Rserve in a sandbox

Only a single option is permitted.
    -h      print this help
    -i      install dependencies
    -k      kill rserve-sandbox-docker
    -s      start rserve-sandbox-docker

Exit status:
 0  if OK,
 1  some error occurred.

Full documentation at: <https://github.com/frnmst/rserve-sandbox>
@end verbatim

@subsection Cplint on SWISH
@verbatim
swish-cplint [OPTION]
SWI-Prolog for SHaring: a SWI-Prolog web IDE integrated with the cplint suite

Only a single option is permitted.
    -h      print this help
    -i      install dependencies
    -k      kill swish-cplint
    -s      start swish-cplint

Exit status:
 0  if OK,
 1  some error occurred.

Full documentation at: <https://github.com/friguzzi/swish>
and at: <https://github.com/friguzzi/cplint>
@end verbatim

@subsection SWISH
@verbatim
swish [OPTION]
SWI-Prolog for SHaring: a SWI-Prolog web IDE

Only a single option is permitted.
    -h      print this help
    -k      kill swish
    -s      start swish

Exit status:
 0  if OK,
 1  some error occurred.

Full documentation at: <https://https://github.com/SWI-Prolog/swish>
@end verbatim

@c ----
@c ----
@c ----
@c ----

@node Thanks
@chapter Thanks
I want to thank the SWI Prolog, Arch Linux and Systemd communities as well the 
authors of the free software used here, which made the creation of these 
packages possible.

I also want to thank Fabrizio Riguzzi which tested the packages and gave me 
advices about them.

@c ----
@c ----
@c ----
@c ----

@node @mybibnode{}
@chapter References

Some quotations reported here are taken directly from the respective web sites.
@*

@itemize @bullet

@mybibitem{Cplint} "A suite of programs for reasoning with probabilistic 
logic programs". See @uref{https://github.com/friguzzi/cplint}
@*

@mybibitem{SWISH} A web browser interface for SWI Prolog to share code. See 
@uref{https://github.com/SWI-Prolog/swish}
for the original version and
@uref{https://github.com/friguzzi/swish}
for the version made by @uref{https://github.com/friguzzi, ,Fabrizio Riguzzi} 
that uses Cplint.
@*

@mybibitem{Rserve} A docker image that enables to use the R and Rserve 
environment in a secure way. See 
@uref{https://github.com/JanWielemaker/rserve-sandbox} for the original version 
made by @uref{https://github.com/JanWielemaker, ,Jan Wielemaker} and
@uref{https://github.com/frnmst/rserve-sandbox/tree/distro-package}
version by @uref{https://github.com/frnmst, ,Franco Masotti}
which is used here. A client to access Rserve from Prolog is also necessary.
See @uref{https://github.com/JanWielemaker/rserve_client}
@*

@mybibitem{R} "R is an integrated suite of software facilities for data 
manipulation, calculation and graphical display". See 
@uref{https://cran.r-project.org/doc/manuals/r-release/R-intro.html}

@mybibitem{Swipl} "SWI-Prolog offers a comprehensive free Prolog environment. 
Since its start in 1987, SWI-Prolog development has been driven by the needs 
of real world applications. SWI-Prolog is widely used in research and 
education as well as commercial applications". See 
@uref{http://www.swi-prolog.org/}
and @uref{https://github.com/SWI-Prolog/swipl-devel}
which is the developement version used here.
@*

@mybibitem{Yaourt} "A pacman wrapper with extended features 
and AUR support". To install Yaourt follow the instructions
reported on @uref{https://archlinux.fr/yaourt-en}.
@*

@mybibitem{AUR} "The Arch User Repository (AUR) is a community-driven 
repository for Arch users. It contains package descriptions (PKGBUILDs) that 
allow you to compile a package from source with makepkg and then install it 
via pacman. The AUR was created to organize and share new packages from the 
community and to help expedite popular packages' inclusion into the community 
repository". See @uref{https://aur.archlinux.org/} for the AUR homepage and 
@uref{https://wiki.archlinux.org/index.php/Arch_User_Repository} for a complete 
explanation.
@*

@mybibitem{Parabola} "A fully free, simple, and lightweight
operating system". See @uref{https://parabola.nu}.
@*

@mybibitem{systemd} "systemd is a suite of basic building blocks for a Linux 
system. It provides a system and service manager that runs as PID 1 and starts 
the rest of the system".
See @uref{https://www.freedesktop.org/wiki/Software/systemd/}.
@*

@mybibitem{Docker} "Docker containers wrap a piece of software in a complete 
filesystem that contains everything needed to run: code, runtime, system 
tools, system libraries – anything that can be installed on a server. This 
guarantees that the software will always run the same, regardless of its 
environment". See @uref{https://www.docker.com/}.
@*

@mybibitem{Packages on the AUR} Here follows a list to the AUR packages:
@itemize @minus

@item
SWI Prolog (developement version)
@uref{https://aur.archlinux.org/packages/swi-prolog-devel}

@item
Rserve sandbox
@uref{https://aur.archlinux.org/packages/rserve-sandbox-docker/}

@item
Cplint on SWISH
@uref{https://aur.archlinux.org/packages/swish-cplint/}

@item
SWISH
@uref{https://aur.archlinux.org/packages/swish/}

@end itemize
@*


@end itemize

@bye

