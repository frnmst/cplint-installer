#!/usr/bin/env bash

#
# swish_installer_full_test
#
# Copyright (C) 2016-2017 frnmst (Franco Masotti) <franco.masotti@student.unife.it>
#
# This file is part of swish-installer.
#
# swish-installer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# swish-installer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with swish-installer.  If not, see <http://www.gnu.org/licenses/>.
#
#

help()
{
    # Use local packages
    # Use remote packages

    # Use dev branches
    # Use master/default branches

    # Use rserve-sandbox-docker-bin instead of rserve-sandbox-docker

    # swish-installer master
    # swish-installer dev

  # "Use dev branches" excludes "Use remote packages" (and vice versa).

cat <<-EOF
Usage: swish_installer_full_test [OPTION]
Full automated install test for the Arch Linux packages in swish-installer

Options are grouped in couples: one excludes the other

Options:
    -b, --binary                use binary packages where available
    -c, --compile               compile packages where available

    -d, --dev                   use development branches where available
    -m, --master                use default branches where available

    -e, --experimental          use swish-installer's dev branch
    -s, --stable                use swish-installer's master branch

    -h, --help                  print this help


Default: --compile --master --stable
Dependencies: git, wget.

Exit status:
 0  if OK,
 1  if an error occurred.

swish_installer_full_test online help: <https://frnmst.github.io/swish-installer/swish-installer.html#Help-pages>
Full documentation at: <https://frnmst.github.io/swish-installer/swish-installer.html>

Copyright  Â©  2017  Franco Masotti.  License GPLv3+: GNU GPL version 3 or 
later <http://gnu.org/licenses/gpl.html>.
This  is  free  software: you are free to change and redistribute it.  There 
is NO WARRANTY, to the extent  permitted by law.
EOF
}

check_dependencies()
{
    pacman -Q git wget || { printf "Install the dependencies."; exit 1; }
}

install_swish_installer()
{
    local branch="$1"
    local build_dir="build"
    local swish_installer="https://github.com/frnmst/swish-installer.git"
    local swish_installer_dest="swish-installer"
    local make_dir="src/distributions/archLinux-based"


    mkdir -p "$build_dir"
    pushd "$build_dir"
    git clone "$swish_installer" "$swish_installer_dest"
    pushd "$swish_installer_dest"
    git checkout "$branch"
    pushd "$make_dir"
    make
}

install_remote_package()
{
    local package_name="$1"

    wget https://aur.archlinux.org/cgit/aur.git/snapshot/"$package_name".tar.gz
    tar -xvzf "$package_name".tar.gz
    pushd "$package_name"
    makepkg -sri --noconfirm
    popd

}

install_local_package()
{
    local package_name="$1"
    local dst_branch="$2"

    pushd "$package_name".aur
    sed -i "s/branch=.*'/branch=$dst_branch'/g" PKGBUILD
    makepkg -sri --noconfirm
    popd

    # Exceptions.
    if [ "$package_name" = "rserve-sandbox-docker" ] \
|| [ "$package_name" = "rserve-sandbox-docker-bin" ]; then
        sudo systemctl start docker
    elif [ "$package_name" = "swish-cplint" ]; then
        sudo -u swish /usr/bin/swish-cplint -i
    fi

    sudo systemctl start "$package_name"
}

remove_package()
{
    local package_name="$1"

    sudo systemctl stop "$package_name"

    sudo pacman -Rnus --noconfirm "$package_name"
}

wait_user_input()
{
    printf "%s\n" "Press return to continue"
    read
}

chain()
{
    local binary="$1"
    local dev="$2"
    local experimental="$3"

    check_dependencies \
&& install_remote_package "swi-prolog-devel" \
&& { if [ "$experimental" = "true" ]; then
        install_swish_installer "dev"
    else
        install_swish_installer "master"
    fi; } \
&& install_local_package "swish" "master" \
&& wait_user_input \
&& remove_package "swish" \
&& { if [ "$binary" = "true" ]; then
        if [ "$dev" = "true" ]; then
            install_local_package "rserve-sandbox-docker-bin" "dev"
        else
            install_local_package "rserve-sandbox-docker-bin" "distro-package"
        fi
    else
        if [ "$dev" = "true" ]; then
            install_local_package "rserve-sandbox-docker" "dev" \
&& sudo -u rsd /usr/bin/rserve-sandbox-docker -i
        else
            install_local_package "rserve-sandbox-docker" "distro-package" \
&& sudo -u rsd /usr/bin/rserve-sandbox-docker -i
        fi
    fi; } \
&& { if [ "$dev" = "true" ]; then
        install_local_package "swish-cplint" "c3js-2-R"
        # Exception handled manually
        sed -i 's/friguzzi/frnmst/g' PKGBUILD
    else
        install_local_package "swish-cplint" "master"
    fi; } \
&& printf "Open http://127.0.0.1:3050\n" \
&&  wait_user_input \
&& remove_package "swish-cplint" \
&& { if [ "$binary" = "true" ]; then
        remove_package "rserve-sandbox-docker-bin"
    else
        remove_package "rserve-sandbox-docker"
    fi; }
}

getopt_error()
{
    printf "%s\n" "Try 'swish_installer_full_test --help' for more information"
} 1>&2-

main()
{
    local argc="$1"
    local options="bcdehms"
    local long_options="binary,compile,dev,experimental,help,master,stable"
    local opts
    local opt

    # Default values
    local binary="false"
    local compile="false"
    local dev="false"
    local master="false"
    local experimental="false"
    local stable="false"

    [ -z "$argc" ] && argc="-cms"

    opts="$(getopt --options $options --longoptions $long_options -- $argc)"

    [ $? -ne 0 ] && getopt_error && return 1

    eval set -- "$opts"

    for opt in $opts; do
        case "$opt" in
            -- )                                                            ;;
            -b | --binary )                 binary=true                     ;;
            -c | --compile )                compile=true                    ;;
            -d | --dev )                    dev=true                        ;;
            -e | --experimental )           experimental=true               ;;
            -h | --help )                   help; exit 0                    ;;
            -m | --master )                 master=true                     ;;
            -s | --stable )                 stable=true                     ;;
        esac
    done

    { { [ "$binary" = "true" ] && [ "$compile" = "true" ]; } \
|| { [ "$dev" = "true" ] && [ "$master" = "true" ]; } \
|| { [ "$experimental" = "true" ] && [ "$stable" = "true" ]; } } \
&& { getopt_error && exit 1; }

    if [ "$compile" = "true" ]; then
        binary="false"
    fi

    if [ "$master" = "true" ]; then
        dev="false"
    fi

    if [ "$stable" = "true" ]; then
        experimental="false"
    fi

    printf "Running with \"binary=$binary; dev=$dev; experimental=$experimental\"\n"
    wait_user_input
    chain "$binary" "$dev" "$experimental"
}

main "$*"
